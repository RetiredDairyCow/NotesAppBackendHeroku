{"version":3,"sources":["components/Note.js","components/Error.js","services/notes.js","App.js","index.js"],"names":["notesStyle","color","fontStyle","fontSize","Note","note","toggleImportance","label","important","className","style","content","onClick","id","Notification","message","class","baseUrl","exportedObjects","getAll","request","axios","get","nonExisting","data","then","response","concat","create","newObject","post","update","put","Footer","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteServices","initialNotes","map","find","n","changedNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7131953.chunk.js","sourcesContent":["import React from 'react'\n\nconst notesStyle ={\n    color: 'orange',\n    fontStyle: 'italic',\n    fontSize: 17\n}\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return (\n    <li key={note.id} className =\"note\" style={notesStyle}>\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n    </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null)\n        return  null\n    else {\n        return (\n        <div class='error'>{message}</div>\n        )\n    }\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'https://peaceful-cliffs-57687.herokuapp.com/api/notes' /*Backend on localhost'http://localhost:3001/api/notes'*/\n\nconst getAll = () => {\n    /*Returns response.data*/\n    /* return axios.get(baseUrl) */\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id : 1000,\n        content: 'Blah blah blah',\n        data: '2019-05-30T17:30:31.098Z',\n        important: true\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n\nconst exportedObjects = {\n    getAll,\n    create,\n    update\n}\nexport default exportedObjects\n\n/*This doesn't work. FSO has it wrong. Leaving it here for future reference\nexport default {\n    getAll : getAll,\n    create : create,\n    update : update\n}*/","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Error'\nimport noteServices from './services/notes'\nimport './index.css'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Dept of CSC</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  \n  const notesToShow = showAll ? notes : notes.filter( note => note.important === true)\n  \n  const hook = () => {\n    noteServices\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  \n  const addNote = (event) => {\n    /*When we create a new Note Obj we let the backend server add the id*/\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    }\n    noteServices\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n    })\n  }\n  \n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOfFunc = (id) => {\n    const handler = () => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important : !note.important}\n    \n    noteServices\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from the server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n\n        }, 4000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n    }\n    return handler\n  }\n\n    return (\n    <div>\n      <h1>Notes</h1>\n      \n      <Notification message={errorMessage}/>\n      \n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      \n      <ul>\n       {notesToShow.map(note =>\n        <Note key={note.id} note={note} toggleImportance={toggleImportanceOfFunc(note.id)} />\n       )}{/*  or use () => toggleImportanceOf(note.id)  */}\n      </ul>\n      \n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n      <button className=\"submitButton\" type=\"submit\">Save</button>\n      </form>\n      \n      <Footer/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}